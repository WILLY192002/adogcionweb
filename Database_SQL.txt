# PASO 1: CREA LA TABLA DE BASE DE DATOS (Si deseea cambiar el nombre, deberá cambiarlo )
Create database adogcionweb

#PASO 2: USA LA TABLA DE BASE DE DATOS POR DEFECTO
use adogcionweb

#PASO 3: REALIZA LA CREACIÓN E INSERCIÓN DE DATOS.
CREATE TABLE `access` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `email` varchar(100) UNIQUE NOT NULL ,
  `password` varchar(255) NOT NULL,
  `user_type_id` int NOT NULL,
  `status` boolean NOT NULL
);

CREATE TABLE `usertype` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `name` varchar(100) NOT NULL UNIQUE
);

CREATE TABLE `adoptioncenter` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `person_id` int NOT NULL,
  `access_id` int NOT NULL,
  `photo` varchar(255),
  `name` varchar(100) NOT NULL,
  `description` TEXT,
  `nit` varchar(50),
  `contact` varchar(50),
  `address` varchar(100),
  `googlemaps` varchar(100),
  `city` varchar(100) NOT NULL,
  `department` varchar(100) NOT NULL
);

CREATE TABLE `paymentoption` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `name` varchar(100) NOT NULL UNIQUE
);

CREATE TABLE `paymentoption_adoptioncenter` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `paymentoption_id` int NOT NULL,
  `adoptioncenter_id` int NOT NULL,
  `number_payment` varchar(50) NOT NULL
);

CREATE TABLE `person` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `first_name` varchar(100) NOT NULL,
  `middle_name` varchar(100),
  `first_surname` varchar(100) NOT NULL,
  `second_lastname` varchar(100),
  `identification_type` varchar(50) NOT NULL,
  `identification_number` varchar(50) NOT NULL,
  `contact` varchar(50),
  `city` varchar(100),
  `department` varchar(100)
);

CREATE TABLE `naturalperson`(
`id` int PRIMARY KEY AUTO_INCREMENT,
`person_id` int NOT NULL,
`access_id` int NOT NULL,
`photo` VARCHAR(255),
`name` VARCHAR(100) NOT NULL,
`description` TEXT,
`score` INT NOT NULL DEFAULT 0);


CREATE TABLE `animal` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `adoptioncenter_id` int NOT NULL,
  `photo` varchar(255),
  `name` varchar(100) NOT NULL,
  `breed_id` int NOT NULL,
  `sex` varchar(50) NOT NULL,
  `age` int,
  `size` varchar(50) NOT NULL,
  `weight` decimal(10,2),
  `observation` TEXT,
  `is_adopted` boolean NOT NULL,
  `upload` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE `species` (
  `id` int PRIMARY KEY,
  `name` varchar(100) NOT NULL UNIQUE
);

CREATE TABLE `breed` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `name` varchar(100) NOT NULL UNIQUE,
  `species_id` int NOT NULL
);

CREATE TABLE `operation` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `name` varchar(100) NOT NULL UNIQUE,
  `description` TEXT NOT NULL
);

CREATE TABLE `disease` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `name` varchar(100),
  `description` TEXT NOT NULL
);

CREATE TABLE `vaccine` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `name` varchar(100),
  `description` TEXT NOT NULL
);

CREATE TABLE `operation_animal` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `operation_id` int NOT NULL,
  `animal_id` int NOT NULL
);

CREATE TABLE `disease_animal` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `disease_id` int NOT NULL,
  `animal_id` int NOT NULL
);

CREATE TABLE `vaccine_animal` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `vaccine_id` int ,
  `animal_id` int NOT NULL
);

CREATE TABLE `publication` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `topic_id` int,
  `access_id` int NOT NULL,
  `photo` varchar(255),
  `title` varchar(100) NOT NULL,
  `description` TEXT NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` boolean NOT NULL,
  `report` INT NOT NULL DEFAULT 0
);

CREATE TABLE `topic` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `category_id` int NOT NULL,
  `name` varchar(50) NOT NULL
);

CREATE TABLE `category` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `name` varchar(50) NOT NULL
);

CREATE TABLE animal_breed_comment (
    id int PRIMARY KEY AUTO_INCREMENT,
    access_id INT NOT NULL,
    breed_id INT NOT NULL,
    description TEXT NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status BOOLEAN NOT NULL,
    report INT NOT NULL DEFAULT 0
);

CREATE TABLE `animal_photo` (
  `id` int PRIMARY KEY AUTO_INCREMENT,
  `animal_id` int NOT NULL,
  `photo` varchar(255) NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE levels (
    id INT PRIMARY KEY AUTO_INCREMENT,
    level_name VARCHAR(255),
    score INT
);

CREATE TABLE users_levels (
    id INT PRIMARY KEY AUTO_INCREMENT,
    naturalperson_id INT NOT NULL,
    level_id INT NOT NULL,
    date_achieved timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status INTEGER DEFAULT 0
);

ALTER TABLE `access` ADD FOREIGN KEY (`user_type_id`) REFERENCES `usertype` (`id`);

ALTER TABLE `adoptioncenter` ADD FOREIGN KEY (`person_id`) REFERENCES `person` (`id`);

ALTER TABLE `adoptioncenter` ADD FOREIGN KEY (`access_id`) REFERENCES `access` (`id`);

ALTER TABLE `paymentoption_adoptioncenter` ADD FOREIGN KEY (`paymentoption_id`) REFERENCES `paymentoption` (`id`);

ALTER TABLE `paymentoption_adoptioncenter` ADD FOREIGN KEY (`adoptioncenter_id`) REFERENCES `adoptioncenter` (`id`);

ALTER TABLE `naturalperson` ADD FOREIGN KEY (`person_id`) REFERENCES `person` (`id`);

ALTER TABLE `naturalperson` ADD FOREIGN KEY (`access_id`) REFERENCES `access` (`id`);

ALTER TABLE `animal` ADD FOREIGN KEY (`adoptioncenter_id`) REFERENCES `adoptioncenter` (`id`);

ALTER TABLE `animal` ADD FOREIGN KEY (`breed_id`) REFERENCES `breed` (`id`);

ALTER TABLE `breed` ADD FOREIGN KEY (`species_id`) REFERENCES `species` (`id`);

ALTER TABLE `operation_animal` ADD FOREIGN KEY (`operation_id`) REFERENCES `operation` (`id`);

ALTER TABLE `operation_animal` ADD FOREIGN KEY (`animal_id`) REFERENCES `animal` (`id`);

ALTER TABLE `disease_animal` ADD FOREIGN KEY (`disease_id`) REFERENCES `disease` (`id`);

ALTER TABLE `disease_animal` ADD FOREIGN KEY (`animal_id`) REFERENCES `animal` (`id`);

ALTER TABLE `vaccine_animal` ADD FOREIGN KEY (`vaccine_id`) REFERENCES `vaccine` (`id`);

ALTER TABLE `vaccine_animal` ADD FOREIGN KEY (`animal_id`) REFERENCES `animal` (`id`);

ALTER TABLE `publication` ADD FOREIGN KEY (`access_id`) REFERENCES `access` (`id`);

ALTER TABLE `publication` ADD FOREIGN KEY (`topic_id`) REFERENCES `topic` (`id`);

ALTER TABLE `topic` ADD FOREIGN KEY (`category_id`) REFERENCES `category` (`id`);

ALTER TABLE `animal_breed_comment` ADD FOREIGN KEY (`access_id`) REFERENCES `access` (`id`);

ALTER TABLE `animal_breed_comment` ADD FOREIGN KEY (`breed_id`) REFERENCES `breed` (`id`);

ALTER TABLE `animal_photo` ADD FOREIGN KEY (`animal_id`) REFERENCES `animal` (`id`);

ALTER TABLE `users_levels` ADD FOREIGN KEY (`naturalperson_id`) REFERENCES `naturalperson` (`id`);

ALTER TABLE `users_levels` ADD FOREIGN KEY (`level_id`) REFERENCES `levels` (`id`);

INSERT INTO usertype (name) VALUES ('UT-ADOPTION_CENTER');
INSERT INTO usertype (name) VALUES ('UT-NATURAL_PERSON');

INSERT INTO species (id, name) VALUES (1,'Perro');
INSERT INTO species (id, name) VALUES (2,'Conejo');
INSERT INTO species (id, name) VALUES (3,'Gato');
INSERT INTO species (id, name) VALUES (4,'Hamster');

INSERT INTO breed (name, species_id) values ('Siamés', 3);
INSERT INTO breed (name, species_id) values ('Ragdoll', 3);
INSERT INTO breed (name, species_id) values ('Poodle', 1);
INSERT INTO breed (name, species_id) values ('Persa', 3);
INSERT INTO breed (name, species_id) values ('Gato común', 3);
INSERT INTO breed (name, species_id) values ('Maine Coon', 3);
INSERT INTO breed (name, species_id) values ('Labrador Retriever', 1);
INSERT INTO breed (name, species_id) values ('German Shepherd', 1);
INSERT INTO breed (name, species_id) values ('Criollo', 1);
INSERT INTO breed (name, species_id) values ('Bulldog', 1);
INSERT INTO breed (name, species_id) values ('Bengalí', 3);
INSERT INTO breed (name, species_id) values ('Beagle', 1);
INSERT INTO breed (name, species_id) values ('Conejo común', 2);
INSERT INTO breed (name, species_id) values ('Conejo holandés', 2);
INSERT INTO breed (name, species_id) values ('Conejo californiano', 2);
INSERT INTO breed (name, species_id) values ('Conejo blanco', 2);
INSERT INTO breed (name, species_id) values ('Hamster ruso', 4);
INSERT INTO breed (name, species_id) values ('Hamster Roborowski', 4);
INSERT INTO breed (name, species_id) values ('Hamster dorado', 4);
INSERT INTO breed (name, species_id) values ('Hamster chino', 4);


INSERT INTO category (id, name) values (1, 'Ayudas');
INSERT INTO category (id, name) values (2, 'Noticias');
INSERT INTO category (id, name) values (3, 'Actividades');

INSERT INTO topic (category_id, name) VALUES (1, 'Comidas');
INSERT INTO topic (category_id, name) VALUES (1, 'Medicamentos');
INSERT INTO topic (category_id, name) VALUES (1, 'Apadrinamientos');
INSERT INTO topic (category_id, name) VALUES (2, 'Animales perdidos');
INSERT INTO topic (category_id, name) VALUES (2, 'Animales encontrados');
INSERT INTO topic (category_id, name) VALUES (3, 'Nuevos eventos');
INSERT INTO topic (category_id, name) VALUES (2, 'Nueva noticia');
INSERT INTO topic (category_id, name) VALUES (3, 'Convocatoria comunidad');

INSERT INTO vaccine (id, name, description) VALUES (1,	'Vacuna contra el Moquillo',	'Protege contra el virus del moquillo canino.');
INSERT INTO vaccine (id, name, description) VALUES (2,	'Vacuna contra el Parvovirus Canino',	'Previene la infección por parvovirus en perros.');
INSERT INTO vaccine (id, name, description) VALUES (3,	'Vacuna contra la Hepatitis Canina',	'Brinda protección contra la hepatitis infecciosa canina.');
INSERT INTO vaccine (id, name, description) VALUES (4,	'Vacuna contra la Tos de las Perreras',	'Protege contra la traqueobronquitis canina.');
INSERT INTO vaccine (id, name, description) VALUES (5,	'Vacuna contra la Rabia',	'Prevención contra la rabia en perros.');
INSERT INTO vaccine (id, name, description) VALUES (6,	'Vacuna contra el Herpesvirus Felino',	'Protege contra el herpesvirus felino, una causa del resfriado en gatos.');
INSERT INTO vaccine (id, name, description) VALUES (7,	'Vacuna contra el Calicivirus Felino',	'Previene el calicivirus felino, otra causa del resfriado felino.');
INSERT INTO vaccine (id, name, description) VALUES (8,	'Vacuna contra la Panleucopenia Felina',	'Ofrece protección contra la panleucopenia felina, similar al parvovirus canino.');
INSERT INTO vaccine (id, name, description) VALUES (9,	'Vacuna contra la Leucemia Felina',	'Protege contra el virus de la leucemia felina en gatos que salen al exterior.');

INSERT INTO disease (id, name, description) VALUES (1, 'Parvovirus Canino', 'Enfermedad viral altamente contagiosa en cachorros.');
INSERT INTO disease (id, name, description) VALUES (2, 'Moquillo Canino', 'Enfermedad viral con síntomas respiratorios y neurológicos.');
INSERT INTO disease (id, name, description) VALUES (3, 'Enfermedad de Lyme', 'Enfermedad bacteriana transmitida por garrapatas.');
INSERT INTO disease (id, name, description) VALUES (4, 'Leptospirosis', 'Infección bacteriana que afecta los riñones y otros órganos.');
INSERT INTO disease (id, name, description) VALUES (5, 'Rinotraqueítis Felina', 'Infección viral respiratoria causada por herpesvirus felino.');
INSERT INTO disease (id, name, description) VALUES (6, 'Leucemia Felina', 'Enfermedad viral que afecta el sistema inmunológico.');
INSERT INTO disease (id, name, description) VALUES (7, 'Panleucopenia Felina', 'Enfermedad viral también conocida como parvovirus felino.');
INSERT INTO disease (id, name, description) VALUES (8, 'Síndrome del Hámster Húmedo', 'Enfermedad con hinchazón abdominal y pelaje mojado.');
INSERT INTO disease (id, name, description) VALUES (9, 'Tumor Mamario en Hámsters Hembra', 'Desarrollo de tumores mamarios en hámsters hembra.');
INSERT INTO disease (id, name, description) VALUES (10, 'Mixomatosis', 'Enfermedad viral en conejos con hinchazón facial y ocular.');

INSERT INTO operation (id, name, description) VALUES (1, 'Esterilización/esterilización',	'Cirugía para controlar la reproducción.');
INSERT INTO operation (id, name, description) VALUES (2, 'Cirugía de tejidos blandos',	'Incluye la extirpación de tumores o corrección de heridas.');
INSERT INTO operation (id, name, description) VALUES (3, 'Cirugía ortopédica',	'Para reparar huesos, articulaciones o ligamentos.');
INSERT INTO operation (id, name, description) VALUES (4, 'Cirugía dental',	'Extracciones de dientes, tratamiento de enfermedades periodontales, etc.');
INSERT INTO operation (id, name, description) VALUES (5, 'Cirugía de emergencia',	'Intervenciones quirúrgicas en casos de lesiones graves o emergencias médicas.');
INSERT INTO operation (id, name, description) VALUES (6, 'Cirugía oftálmica',	'Tratamiento de problemas oculares, como cataratas.');
INSERT INTO operation (id, name, description) VALUES (7, 'Cirugía reconstructiva',	'Para corregir malformaciones o lesiones.');
INSERT INTO operation (id, name, description) VALUES (8, 'Cirugía de las vías respiratorias',	'Para abordar problemas como las estenosis nasales.');
INSERT INTO operation (id, name, description) VALUES (9, 'Cirugía de oído',	'Para tratar infecciones crónicas u otros problemas.');
INSERT INTO operation (id, name, description) VALUES (10, 'Cirugía neurológica',	'Para abordar problemas en el sistema nervioso.');
INSERT INTO operation (id, name, description) VALUES (11, 'Cirugía de extremidades',	'Para tratar problemas en extremidades del animal.');

INSERT INTO paymentoption (`name`) VALUES ('Bancolombia');
INSERT INTO paymentoption (`name`) VALUES ('Nequi');
INSERT INTO paymentoption (`name`) VALUES ('Daviplata');
INSERT INTO paymentoption (`name`) VALUES ('Banco a la mano');
INSERT INTO paymentoption (`name`) VALUES ('Giro efecty');

INSERT INTO levels (level_name, score) VALUES ('Payaso', -100);
INSERT INTO levels (level_name, score) VALUES ('Primer aporte', 10);
INSERT INTO levels (level_name, score) VALUES ('Cuidador novato', 50);
INSERT INTO levels (level_name, score) VALUES ('Amigo de los caninos', 100);
INSERT INTO levels (level_name, score) VALUES ('Entrenador en ascenso', 200);
INSERT INTO levels (level_name, score) VALUES ('Experto en crianza', 500);
INSERT INTO levels (level_name, score) VALUES ('Héroe de las fundaciones', 1000);
INSERT INTO levels (level_name, score) VALUES ('Leyenda canina', 2000);

-- Desactivar comentario por reportes
DELIMITER //
CREATE PROCEDURE deactivate_comment_procedure (IN comment_id INT)
BEGIN
   DECLARE report_count INT;
   SELECT report INTO report_count FROM animal_breed_comment WHERE id = comment_id;
   IF report_count = 100 THEN
      UPDATE animal_breed_comment
      SET status = 0
      WHERE id = comment_id;
   END IF;
END;//
DELIMITER ;

-- Desactivar publicación por reportes
DELIMITER //
CREATE PROCEDURE deactivate_publication_procedure (IN comment_id INT)
BEGIN
   DECLARE report_count INT;
   SELECT report INTO report_count FROM publication WHERE id = comment_id;
   IF report_count = 100 THEN
      UPDATE publication
      SET status = 0
      WHERE id = comment_id;
   END IF;
END;//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE score_decrement_comment(IN comment_id INT)
BEGIN
    DECLARE person_id INT;
    DECLARE person_score INT;
    
    -- Busca el access_id en la tabla animal_breed_comment
    SELECT access_id INTO person_id FROM animal_breed_comment WHERE id = comment_id;
    
    -- Verifica si el access_id existe en la tabla naturalperson
    IF EXISTS (SELECT 1 FROM naturalperson WHERE access_id = person_id) THEN
        -- Obtiene el puntaje actual para el access_id
        SELECT score INTO person_score FROM naturalperson WHERE access_id = person_id;
        
        -- Actualiza el puntaje restando 10
        UPDATE naturalperson
        SET score = person_score - 10
        WHERE access_id = person_id;
        
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE update_naturalperson_score(IN new_access_id INT, IN score_increment INT)
BEGIN
    DECLARE score_value INT;
    
    -- Verifica si el access_id existe en la tabla naturalperson
    IF EXISTS (SELECT 1 FROM naturalperson WHERE access_id = new_access_id) THEN
        -- Obtiene el puntaje actual para el access_id
        SELECT score INTO score_value FROM naturalperson WHERE access_id = new_access_id;
        
        -- Actualiza el puntaje sumando el incremento proporcionado
        UPDATE naturalperson
        SET score = score_value + score_increment
        WHERE access_id = new_access_id;
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE score_decrement(IN publication_id INT)
BEGIN
    DECLARE person_id INT;
    DECLARE person_score INT;
    
    -- Busca el access_id en la tabla publication
    SELECT access_id INTO person_id FROM publication WHERE id = publication_id;
    
    -- Verifica si el access_id existe en la tabla naturalperson
    IF EXISTS (SELECT 1 FROM naturalperson WHERE access_id = person_id) THEN
        -- Obtiene el puntaje actual para el access_id
        SELECT score INTO person_score FROM naturalperson WHERE access_id = person_id;
        
        -- Actualiza el puntaje restando 10
        UPDATE naturalperson
        SET score = person_score - 10
        WHERE access_id = person_id;
        
    END IF;
END;
//
DELIMITER ;
